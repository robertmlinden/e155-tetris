#ifndef TETRISLIB_H
#define TETRISLIB_H

// Board Specifications ///////////////////////////////////////////////////

#define BOARD_WIDTH 12
#define BOARD_HEIGHT 22

// Pieces and Piece Types ////////////////////////////////////////////////////////

typedef enum {
	S,
	Z,
	I,
	O,
	T,
	L,
	J
} PieceShape;

typedef struct {
	PieceShape pieceShape;
	int rotation;
	
	// r and c are the location of the top left tile of the 4x4 piece representation
	int r;
	int c;
} FallingPiece;

#define NUM_PIECES 7
#define NUM_ROTATIONS 4
#define PIECE_BLOCK_SIZE 4

char PIECE[PIECE_BLOCK_SIZE][PIECE_BLOCK_SIZE] = {{' ', ' ', ' ', ' '},
		 {' ', 'S', 'S', ' '},
		 {'S', 'S', ' ', ' '},
		 {' ', ' ', ' ', ' '}};



char PIECES[NUM_PIECES][NUM_ROTATIONS][PIECE_BLOCK_SIZE][PIECE_BLOCK_SIZE] = 
{
	{
	// S
		{{' ', ' ', ' ', ' '},
		 {' ', 'S', 'S', ' '},
		 {'S', 'S', ' ', ' '},
		 {' ', ' ', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', 'S', ' ', ' '},
		 {' ', 'S', 'S', ' '},
		 {' ', ' ', 'S', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {' ', 'S', 'S', ' '},
		 {'S', 'S', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {'S', ' ', ' ', ' '},
		 {'S', 'S', ' ', ' '},
		 {' ', 'S', ' ', ' '}}
	},
	
	{
	// Z
		{{' ', ' ', ' ', ' '},
		 {'Z', 'Z', ' ', ' '},
		 {' ', 'Z', 'Z', ' '},
		 {' ', ' ', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', 'Z', ' '},
		 {' ', 'Z', 'Z', ' '},
		 {' ', 'Z', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'Z', 'Z', ' ', ' '},
		 {' ', 'Z', 'Z', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', 'Z', ' ', ' '},
		 {'Z', 'Z', ' ', ' '},
		 {'Z', ' ', ' ', ' '}}
	},
	
	{
	// I
		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'I', 'I', 'I', 'I'},
		 {' ', ' ', ' ', ' '}},

		{{' ', 'I', ' ', ' '},
		 {' ', 'I', ' ', ' '},
		 {' ', 'I', ' ', ' '},
		 {' ', 'I', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {'I', 'I', 'I', 'I'},
		 {' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '}},

		 {{' ', ' ', 'I', ' '},
		 {' ', ' ', 'I', ' '},
		 {' ', ' ', 'I', ' '},
		 {' ', ' ', 'I', ' '}}
	},
	
	{
	// O
		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'O', 'O', ' ', ' '},
		 {'O', 'O', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'O', 'O', ' ', ' '},
		 {'O', 'O', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'O', 'O', ' ', ' '},
		 {'O', 'O', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'O', 'O', ' ', ' '},
		 {'O', 'O', ' ', ' '}}
	},
	
	{
	// T
		{{' ', ' ', ' ', ' '},
		 {' ', 'T', ' ', ' '},
		 {'T', 'T', 'T', ' '},
		 {' ', ' ', ' ', ' '}},	

		{{' ', ' ', ' ', ' '},
		 {' ', 'T', ' ', ' '},
		 {' ', 'T', 'T', ' '},
		 {' ', 'T', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'T', 'T', 'T', ' '},
		 {' ', 'T', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', 'T', ' ', ' '},
		 {'T', 'T', ' ', ' '},
		 {' ', 'T', ' ', ' '}}
	},
	
	{
	// L
		{{' ', ' ', ' ', ' '},
		 {' ', ' ', 'L', ' '},
		 {'L', 'L', 'L', ' '},
		 {' ', ' ', ' ', ' '}},	
	
		{{' ', ' ', ' ', ' '},
		 {' ', 'L', ' ', ' '},
		 {' ', 'L', ' ', ' '},
		 {' ', 'L', 'L', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'L', 'L', 'L', ' '},
		 {'L', ' ', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {'L', 'L', ' ', ' '},
		 {' ', 'L', ' ', ' '},
		 {' ', 'L', ' ', ' '}}
	},
	
	{
	// J
		{{' ', ' ', ' ', ' '},
		 {'J', ' ', ' ', ' '},
		 {'J', 'J', 'J', ' '},
		 {' ', ' ', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', 'J', 'J', ' '},
		 {' ', 'J', ' ', ' '},
		 {' ', 'J', ' ', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', ' ', ' ', ' '},
		 {'J', 'J', 'J', ' '},
		 {' ', ' ', 'J', ' '}},

		{{' ', ' ', ' ', ' '},
		 {' ', 'J', ' ', ' '},
		 {' ', 'J', ' ', ' '},
		 {'J', 'J', ' ', ' '}}
	}
};

// Miscellaneous ///////////////////////////////////////////////////

typedef int bool;
#define true 1
#define false 0

#endif